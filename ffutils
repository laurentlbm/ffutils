#!/usr/bin/env bash
# This script was generated by bashly 0.8.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ffutils_usage() {
  if [[ -n $long_usage ]]; then
    printf "ffutils - Simple helper for common ffmpeg commands\n"
    echo

  else
    printf "ffutils - Simple helper for common ffmpeg commands\n"
    echo

  fi

  printf "Usage:\n"
  printf "  ffutils COMMAND\n"
  printf "  ffutils [COMMAND] --help | -h\n"
  printf "  ffutils --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  completions   Generate bash completions"
  echo "  extract-cc    Extract Closed Captioning from a video file into a SRT file."
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
ffutils_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "ffutils completions\n"
    echo

    printf "  Generate bash completions\n  Usage: eval \"\$(ffutils completions)\"\n"
    echo

  else
    printf "ffutils completions - Generate bash completions\n"
    echo

  fi

  printf "Usage:\n"
  printf "  ffutils completions\n"
  printf "  ffutils completions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
ffutils_extract_cc_usage() {
  if [[ -n $long_usage ]]; then
    printf "ffutils extract-cc - Extract Closed Captioning from a video file into a SRT file.\n"
    echo

  else
    printf "ffutils extract-cc - Extract Closed Captioning from a video file into a SRT file.\n"
    echo

  fi

  printf "Usage:\n"
  printf "  ffutils extract-cc VIDEO [OPTIONS]\n"
  printf "  ffutils extract-cc --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --output, -o OUTPUT"
    printf "    Target filename (default: .srt file named after video file, saved in current\n    directory)\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  VIDEO"
    printf "    Video file\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  ffutils extract-cc video_file.mp4\n"
    printf "  ffutils extract-cc /path/video_file.mp4 -o /path2/suds.srt\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/say.sh
say() {
  printf "%-20s | %s\n" "$(magenta "$1")" "$(bold "${*:2}")"
}

# src/lib/send_completions.sh
send_completions() {
  echo $'# ffutils completion                                       -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_ffutils_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $'  '
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_ffutils_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_ffutils_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'extract-cc\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -A directory -A file -W "$(_ffutils_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_ffutils_completions_filter "--help --version -h -v completions extract-cc")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'complete -F _ffutils_completions ffutils'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
ffutils_completions_command() {
  # src/completions_command.sh
  send_completions

}

# :command.function
ffutils_extract_cc_command() {
  # src/extract_cc_command.sh
  video_file=${args[video]}
  srt_file=${args[output]}

  # No output file specified, output to a file in the current directory.
  [[ $srt_file ]] || {
    filename=$(basename -- "${video_file}")
    srt_file="${filename%.*}.srt"
  }

  # Escape '[' and ']' because they are used in the `ffmpeg` filter syntax.
  video_file="${video_file//\\/\\\\}"
  video_file="${video_file//\[/\\[}"
  video_file="${video_file//\]/\\]}"

  say "extract-cc" "Extracting closed captions from video file."
  ffmpeg -f lavfi -i "movie='${video_file}'[out0+subcc]" -map s "${srt_file}"

  say "extract-cc" "Cleaning up subtitles (removing HTML and other tags)."
  pysubs2 --clean "${srt_file}"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    ffutils_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  completions )
    action="completions"
    shift
    ffutils_completions_parse_requirements "$@"
    shift $#
    ;;

  extract-cc )
    action="extract-cc"
    shift
    ffutils_extract_cc_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    ffutils_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
ffutils_completions_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    ffutils_completions_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="completions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
ffutils_extract_cc_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    ffutils_extract_cc_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="extract-cc"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --output | -o )

      # :flag.case_arg
      if [[ -n ${2+x} ]]; then

        args[--output]="$2"
        shift
        shift
      else
        printf "%s\n" "--output requires an argument: --output, -o OUTPUT" >&2
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[video]+x} ]]; then

        args[video]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key" >&2
        exit 1
      fi

      ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[video]+x} ]]; then
    printf "missing required argument: VIDEO\nusage: ffutils extract-cc VIDEO [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "completions" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      ffutils_completions_usage
    else
      ffutils_completions_command
    fi

  elif [[ $action == "extract-cc" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      ffutils_extract_cc_usage
    else
      ffutils_extract_cc_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
